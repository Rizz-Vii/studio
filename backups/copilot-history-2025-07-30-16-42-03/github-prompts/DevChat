# 🧠 AI IDE INSTRUCTION PROMPT: Build AI Chatbot for SEO SaaS (RankPilot)

## 🚀 Objective

Develop a modular, intelligent chatbot that:

- Uses Firestore-stored SEO audits and website content
- Answers SEO-related queries based on real data
- Lives within a modern React front-end
- Is powered by a Firebase Callable Function
- Follows high-performance, secure, and scalable architecture principles

---

## 📁 Firestore Database Structure

Please use this Firestore schema:

users/{uid}
└── profile: { name, email, plan }

audits/{uid}/urls/{urlId}
├── score: { performance, accessibility, seo, ... }
├── issues: [string]
└── suggestions: [string]

siteContent/{uid}/pages/{slug}
├── html: "<...>"
├── text: "Extracted visible text"
└── embeddings: [number]

chatLogs/{uid}/sessions/{sessionId}
└── { timestamp, question, response }

faq/{topic}
└── { question, answer }

yaml
Copy code

Ensure `chatLogs` can support conversation persistence.

---

## 🔄 Context Fetchers (Node / TypeScript)

Create a utility file at `src/ai/context.ts`:

- `getAuditContext(uid: string, url: string)`: Fetches top audit scores, issues, and suggestions.
- `getSiteContext(uid: string)`: Aggregates plain text from all pages for context injection into LLM prompts.

Make this modular, cache-aware (memoized where possible), and typed.

---

## 🔥 Firebase Callable Function

Create `functions/chatbot.ts`:

- Callable via `chatbotHandler`
- Receives: `{ uid, message, url }`
- Uses `getAuditContext` + `getSiteContext` to construct a system + user prompt
- Calls OpenAI/Claude with this full context
- Returns structured response
- Log each chat into `chatLogs/{uid}/sessions/{sessionId}`

Follow best practices:

- Use try/catch
- Validate `uid` and `url`
- Handle empty context gracefully

---

## 💬 React ChatBot UI Component

Create `components/ChatBot.tsx`:

- Floating button: "💬 Ask RankPilot"
- Opens a side drawer (use `shadcn/ui` or headless-ui)
- Shows history and AI responses
- Sends user input to `/api/chatbot` (or Firebase callable proxy)
- Displays `thinking...` while waiting
- Scrolls to bottom on new message
- Fully accessible + keyboard friendly

Use:

- `useEffect` for auto-scroll
- `useState` for conversation state
- Animate replies with framer-motion if available

---

## ✅ Additional Technical Instructions

- Use **modular file structure** (utils, components, functions)
- Ensure **secure rules** in Firestore access (auth-based document access only)
- Use **TypeScript** with proper types and `zod` or `yup` for validation
- Keep network calls cancellable and error-resilient
- Maintain **strict memory control** on client (limit long chat history loads)
- Respect OpenAI rate limits and token budgets when fetching long contexts

---

## 🧠 Prompt Template (LLM)

```txt
System:
You are RankPilot, an AI SEO assistant. Help the user by using real SEO audits and their site content.

Audit:
{{ audit.score }}
Issues:
{{ audit.issues }}

Site Context:
{{ siteContext }}

User:
{{ message }}

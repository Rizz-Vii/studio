rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidUser() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    // By default, deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();

      // User activities subcollection
      match /activities/{activityId} {
        allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
        allow create: if isAuthenticated() && isOwner(userId);
        allow update: if isAuthenticated() && isOwner(userId);
        allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
      }
    }

    // SEO audits collection
    match /audits/{auditId} {
      allow read: if isValidUser() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow create: if isValidUser() && (
        request.resource.data.userId == request.auth.uid
      );
      allow update, delete: if isValidUser() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
    }

    // Keywords collection
    match /keywords/{keywordId} {
      allow read: if isValidUser() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow create: if isValidUser() && (
        request.resource.data.userId == request.auth.uid
      );
      allow update, delete: if isValidUser() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
    }

    // Rate limiting collection
    match /rateLimits/{userId} {
      allow read: if isOwner(userId);
      allow create, update: if isOwner(userId) && (
        request.time.toMillis() - (resource == null ? 0 : resource.data.lastRequest.toMillis()) > 1000
      );
    }
  }
}

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get the user's role from their document
    function getUserRole(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role;
    }

    // Users can read and update their own profiles
    match /users/{userId} {
      allow read, update: if isAuthenticated() && request.auth.uid == userId;
      // Admins can read any user's profile
      allow get: if isAuthenticated() && getUserRole(request.auth.uid) == 'admin';
    }
    
    // Users can only create their own user document upon signup
    match /users/{userId} {
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Allow admins to list all users (for the admin dashboard)
    match /users/{userId} {
        allow list: if isAuthenticated() && getUserRole(request.auth.uid) == 'admin';
    }
    
    // Users can read and write to their own 'activities' subcollection
    match /users/{userId}/activities/{activityId} {
      allow read, write, create, delete: if isAuthenticated() && request.auth.uid == userId;
    }
  }
}

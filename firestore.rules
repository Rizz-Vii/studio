rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidUser() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    // By default, deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // User profiles - Enhanced RBAC
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
      allow list: if isAuthenticated() && isAdmin();

      // User activities subcollection
      match /activities/{activityId} {
        allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
        allow create: if isAuthenticated() && isOwner(userId);
        allow update: if isAuthenticated() && isOwner(userId);
        allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
      }

      // User usage tracking subcollection
      match /usage/{usageId} {
        allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
        allow create: if isAuthenticated() && isOwner(userId);
        allow update: if isAuthenticated() && isOwner(userId);
        allow delete: if isAdmin();
      }
    }

    // SEO audits collection - Enhanced with usage limits
    match /audits/{auditId} {
      allow read: if isValidUser() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow create: if isValidUser() && (
        request.resource.data.userId == request.auth.uid
      );
      allow update, delete: if isValidUser() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
    }

    // Keywords collection
    match /keywords/{keywordId} {
      allow read: if isValidUser() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow create: if isValidUser() && (
        request.resource.data.userId == request.auth.uid
      );
      allow update, delete: if isValidUser() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
    }

    // Rate limiting collection - Enhanced
    match /rateLimits/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create, update: if isOwner(userId) && (
        request.time.toMillis() - (resource == null ? 0 : resource.data.lastRequest.toMillis()) > 1000
      );
    }

    // Subscription data
    match /subscriptions/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create, update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // Usage quotas and limits
    match /quotas/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create, update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // NeuroSEOâ„¢ Analyses Collection - NEW
    match /neuroSeoAnalyses/{analysisId} {
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Keyword Research Collection - NEW  
    match /keywordResearch/{researchId} {
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Usage Tracking Collection - NEW
    match /usage/{usageId} {
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || isAdmin());
    }
  }
}

# Performance Branch Testing Deployment Workflow
# This workflow deploys the performance-optimization-mobile-enhancement branch
# to a dedicated Firebase channel for testing purposes

name: Deploy Performance Branch for Testing

on:
  push:
    branches:
      - feature/performance-optimization-mobile-enhancement
  workflow_dispatch:
    inputs:
      deploy_functions:
        description: "Deploy Firebase Functions as well"
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "20"
  FIREBASE_PROJECT_ID: "rankpilot-h3jpc"
  FIREBASE_TOOLS_VERSION: "13.31.2"

jobs:
  test_build:
    runs-on: ubuntu-latest
    name: Test Build & Performance Metrics

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Show git status with ignored files
        run: |
          echo "## ðŸ”§ Git Status with Ignored Files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Current repository status:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          git status --ignored >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Gitignore verification complete âœ…" >> $GITHUB_STEP_SUMMARY

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run type checking
        run: npm run typecheck
        continue-on-error: true

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      - name: Build Next.js application
        run: npm run build
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          NEXT_PUBLIC_RECAPTCHA_SITE_KEY: ${{ secrets.NEXT_PUBLIC_RECAPTCHA_SITE_KEY }}
          RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}

      - name: Analyze bundle size
        run: npm run analyze
        continue-on-error: true

  deploy_preview:
    runs-on: ubuntu-latest
    needs: test_build
    name: Deploy to Performance Testing Channel

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: npm run build
        env:
          NODE_OPTIONS: "--max-old-space-size=8192"
          ESLINT_NO_DEV_ERRORS: "true"
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          NEXT_PUBLIC_RECAPTCHA_SITE_KEY: ${{ secrets.NEXT_PUBLIC_RECAPTCHA_SITE_KEY }}
          RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}

      - name: Create functions environment file
        run: |
          cd functions
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" > .env
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}" >> .env

      - name: Deploy to Firebase Hosting (Performance Testing Channel)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_RANKPILOT_H3JPC }}
          projectId: rankpilot-h3jpc
          channelId: performance-testing
          expires: 7d
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

      - name: Deploy Functions (if requested)
        if: github.event.inputs.deploy_functions == 'true'
        run: |
          npm install -g firebase-tools@${{ env.FIREBASE_TOOLS_VERSION }}
          firebase functions:config:set \
            gemini.api_key="${{ secrets.GEMINI_API_KEY }}" \
            google.api_key="${{ secrets.GOOGLE_API_KEY }}" \
            openai.api_key="${{ secrets.OPENAI_API_KEY }}" \
            recaptcha.secret_key="${{ secrets.RECAPTCHA_SECRET_KEY }}" \
            --project ${{ env.FIREBASE_PROJECT_ID }}
          firebase deploy --only functions --project ${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_RANKPILOT_H3JPC }}

  performance_tests:
    runs-on: ubuntu-latest
    needs: deploy_preview
    name: Run Performance Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run performance-focused E2E tests
        run: npx playwright test --config=playwright.config.base.ts --grep="performance|mobile|loading"
        env:
          TEST_BASE_URL: "https://rankpilot-h3jpc--performance-testing-mw0cwov5.web.app"
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  mobile_tests:
    runs-on: ubuntu-latest
    needs: deploy_preview
    name: Run Mobile UX Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run mobile-specific tests
        run: npx playwright test --config=playwright.config.base.ts --grep="mobile"
        env:
          TEST_BASE_URL: "https://rankpilot-h3jpc--performance-testing-mw0cwov5.web.app"
        continue-on-error: true

      - name: Upload mobile test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-test-results
          path: |
            playwright-report/
            test-results/
            test-snapshots/
          retention-days: 7

  notify_completion:
    runs-on: ubuntu-latest
    needs: [test_build, deploy_preview, performance_tests, mobile_tests]
    if: always()
    name: Notify Deployment Status

    steps:
      - name: Create deployment summary
        run: |
          echo "## ðŸš€ Performance Branch Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** feature/performance-optimization-mobile-enhancement" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“Š Test Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Build:** ${{ needs.test_build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy:** ${{ needs.deploy_preview.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Tests:** ${{ needs.performance_tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Mobile Tests:** ${{ needs.mobile_tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ”— Preview URL:" >> $GITHUB_STEP_SUMMARY
          echo "Your performance-optimized build is available at the Firebase preview channel." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“ˆ Performance Monitoring:" >> $GITHUB_STEP_SUMMARY
          echo "- Check the performance dashboard in your deployed app" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor loading times and mobile responsiveness" >> $GITHUB_STEP_SUMMARY
          echo "- Test the user feedback system" >> $GITHUB_STEP_SUMMARY

---
# Production Deployment Workflow (Master Branch)
# This workflow deploys the master branch to production on pull requests only
# Based on Firebase best practices for production deployments

name: Deploy Master to Production

on:
  pull_request:
    branches:
      - master
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:
    inputs:
      deploy_functions:
        description: "Deploy Firebase Functions as well"
        required: false
        default: true
        type: boolean
      skip_tests:
        description: "Skip test suite (emergency deployment only)"
        required: false
        default: false
        type: boolean

# Environment settings for production
env:
  NODE_VERSION: "20"
  FIREBASE_PROJECT_ID: "rankpilot-h3jpc"
  FIREBASE_TOOLS_VERSION: "13.31.2"

jobs:
  # Pre-deployment validation
  pre_deployment_validation:
    runs-on: ubuntu-latest
    name: Pre-Deployment Validation
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'

    outputs:
      should_deploy: ${{ steps.validation.outputs.should_deploy }}
      pr_number: ${{ github.event.pull_request.number }}

    steps:
      - name: Checkout master branch
        uses: actions/checkout@v4
        with:
          ref: master
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Production validation checks
        id: validation
        run: |
          echo "## 🔍 Production Deployment Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if this is a merged PR or manual dispatch
          if [ "${{ github.event.pull_request.merged }}" == "true" ] || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "✅ Deployment trigger validated" >> $GITHUB_STEP_SUMMARY
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Deployment skipped - PR not merged" >> $GITHUB_STEP_SUMMARY
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Deployment Context:" >> $GITHUB_STEP_SUMMARY
          echo "- **Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

  # Production build and quality gates
  production_build:
    runs-on: ubuntu-latest
    needs: pre_deployment_validation
    name: Production Build & Quality Gates
    if: needs.pre_deployment_validation.outputs.should_deploy == 'true'

    steps:
      - name: Checkout master branch
        uses: actions/checkout@v4
        with:
          ref: master
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: TypeScript compilation check
        run: npm run typecheck
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: ESLint validation
        run: npm run lint
        continue-on-error: false

      - name: Security audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: Production build
        run: npm run build
        env:
          NODE_OPTIONS: "--max-old-space-size=8192"
          ESLINT_NO_DEV_ERRORS: "true"
          # Production environment variables
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          NEXT_PUBLIC_RECAPTCHA_SITE_KEY: ${{ secrets.NEXT_PUBLIC_RECAPTCHA_SITE_KEY }}
          RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}

      - name: Bundle analysis
        run: npm run analyze
        continue-on-error: true

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .next
            out
          key: ${{ runner.os }}-production-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-production-build-

  # Critical path testing
  production_testing:
    runs-on: ubuntu-latest
    needs: [pre_deployment_validation, production_build]
    name: Production Testing Suite
    if: needs.pre_deployment_validation.outputs.should_deploy == 'true' && github.event.inputs.skip_tests != 'true'

    strategy:
      matrix:
        test-suite: ["critical", "integration", "e2e"]

    steps:
      - name: Checkout master branch
        uses: actions/checkout@v4
        with:
          ref: master
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            .next
            out
          key: ${{ runner.os }}-production-build-${{ github.sha }}

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run production test suite
        run: |
          case "${{ matrix.test-suite }}" in
            "critical")
              npx playwright test --config=playwright.config.base.ts --grep="@critical"
              ;;
            "integration")
              npx playwright test --config=playwright.config.base.ts --grep="@integration"
              ;;
            "e2e")
              npx playwright test --config=playwright.config.base.ts --grep="@e2e"
              ;;
          esac
        env:
          TEST_BASE_URL: "https://rankpilot-h3jpc.web.app"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: production-test-results-${{ matrix.test-suite }}
          path: |
            playwright-report/
            test-results/
          retention-days: 14

  # Production deployment
  deploy_production:
    runs-on: ubuntu-latest
    needs: [pre_deployment_validation, production_build, production_testing]
    name: Deploy to Production
    if: always() && needs.pre_deployment_validation.outputs.should_deploy == 'true' && (needs.production_testing.result == 'success' || needs.production_testing.result == 'skipped')

    steps:
      - name: Checkout master branch
        uses: actions/checkout@v4
        with:
          ref: master
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@${{ env.FIREBASE_TOOLS_VERSION }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            .next
            out
          key: ${{ runner.os }}-production-build-${{ github.sha }}

      - name: Rebuild if cache miss
        run: |
          if [ ! -d ".next" ]; then
            echo "Build cache miss, rebuilding..."
            npm run build
          fi
        env:
          NODE_OPTIONS: "--max-old-space-size=8192"

      - name: Create functions environment
        run: |
          cd functions
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" > .env
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}" >> .env

      - name: Deploy to Firebase Production
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_RANKPILOT_H3JPC }}
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

      - name: Deploy Firebase Functions
        if: github.event.inputs.deploy_functions != 'false'
        run: |
          firebase functions:config:set \
            gemini.api_key="${{ secrets.GEMINI_API_KEY }}" \
            google.api_key="${{ secrets.GOOGLE_API_KEY }}" \
            openai.api_key="${{ secrets.OPENAI_API_KEY }}" \
            recaptcha.secret_key="${{ secrets.RECAPTCHA_SECRET_KEY }}" \
            --project ${{ env.FIREBASE_PROJECT_ID }}
          firebase deploy --only functions --project ${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_RANKPILOT_H3JPC }}

  # Post-deployment validation
  post_deployment_validation:
    runs-on: ubuntu-latest
    needs: [deploy_production]
    name: Post-Deployment Validation
    if: always() && needs.deploy_production.result == 'success'

    steps:
      - name: Checkout master branch
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Production smoke tests
        run: npx playwright test --config=playwright.config.simple.ts --grep="@smoke"
        env:
          TEST_BASE_URL: "https://rankpilot-h3jpc.web.app"
        continue-on-error: true

      - name: Performance audit
        run: |
          echo "## 🚀 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Production URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- **Main Site:** https://rankpilot-h3jpc.web.app" >> $GITHUB_STEP_SUMMARY
          echo "- **Admin Dashboard:** https://rankpilot-h3jpc.web.app/admin" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Deployment Metrics:" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Success:** ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Function Deploy:** ${{ needs.deploy_production.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Monitor application performance and errors" >> $GITHUB_STEP_SUMMARY
          echo "2. Check Firebase Console for function logs" >> $GITHUB_STEP_SUMMARY
          echo "3. Validate critical user flows manually" >> $GITHUB_STEP_SUMMARY
          echo "4. Monitor Core Web Vitals and user feedback" >> $GITHUB_STEP_SUMMARY

      - name: Upload post-deployment results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: post-deployment-validation
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  # Rollback capability
  rollback_on_failure:
    runs-on: ubuntu-latest
    needs: [post_deployment_validation]
    name: Rollback on Critical Failure
    if: failure() && needs.post_deployment_validation.result == 'failure'

    steps:
      - name: Rollback notification
        run: |
          echo "## ⚠️ Production Deployment Failure Detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Critical post-deployment tests failed. Manual intervention required." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Rollback Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Check Firebase Console for deployment status" >> $GITHUB_STEP_SUMMARY
          echo "2. Review function logs for errors" >> $GITHUB_STEP_SUMMARY
          echo "3. Consider rolling back to previous deployment" >> $GITHUB_STEP_SUMMARY
          echo "4. Investigate test failures and fix before redeployment" >> $GITHUB_STEP_SUMMARY

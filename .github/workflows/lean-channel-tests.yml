name: 🧪 Development Hyperloop - Lean Channel Tests

on:
  workflow_run:
    workflows: ["🚀 Development Hyperloop - Instant Lean Deploy"]
    types:
      - completed
  repository_dispatch:
    types: [hyperloop-test-trigger]
  workflow_dispatch:
    inputs:
      channelId:
        description: 'Lean channel ID to test against'
        type: string
        required: false

env:
  NODE_VERSION: '20.x'
  FIREBASE_PROJECT_ID: 'rankpilot-h3jpc'
  NODE_OPTIONS: '--max-old-space-size=3072'

jobs:
  test-lean-channel:
    name: 🧪 Validate Lean Channel
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'repository_dispatch' }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install Dependencies
        run: |
          npm ci --prefer-offline
          npx playwright install --with-deps chromium
          echo "✅ Dependencies installed"
      
      - name: 🔑 Set up Firebase
        uses: FirebaseExtended/github-actions/setup-firebase@v1.3.1
      
      - name: 🔍 Get Lean Channel URL
        id: channel-url
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ inputs.channelId }}" ]; then
            CHANNEL_ID="${{ inputs.channelId }}"
          elif [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            CHANNEL_ID="${{ github.event.client_payload.channel_id }}"
            echo "Using channel from dispatch event: $CHANNEL_ID"
            echo "DEPLOY_URL=${{ github.event.client_payload.url }}" >> $GITHUB_OUTPUT
          else
            # Get most recent lean channel
            CHANNEL_JSON=$(firebase hosting:channel:list --project ${{ env.FIREBASE_PROJECT_ID }} --json)
            CHANNEL_ID=$(echo "$CHANNEL_JSON" | grep -o '"name":"lean-[^"]*' | head -1 | cut -d'"' -f4)
          fi
          
          if [ -z "$CHANNEL_ID" ]; then
            echo "❌ No lean channel found"
            exit 1
          fi
          
          # Get URL for the channel
          CHANNEL_URL=$(firebase hosting:channel:open $CHANNEL_ID --project ${{ env.FIREBASE_PROJECT_ID }} --json | grep -o '"url":"[^"]*' | cut -d'"' -f4)
          echo "CHANNEL_URL=$CHANNEL_URL" >> $GITHUB_OUTPUT
          echo "CHANNEL_ID=$CHANNEL_ID" >> $GITHUB_OUTPUT
          echo "Testing against channel: $CHANNEL_ID ($CHANNEL_URL)"
      
      - name: 🌐 Basic Smoke Tests
        run: |
          echo "Running basic smoke test against ${{ steps.channel-url.outputs.CHANNEL_URL }}"
          curl -f "${{ steps.channel-url.outputs.CHANNEL_URL }}" > /dev/null && \
            echo "✅ Channel is accessible" || \
            { echo "❌ Channel health check failed"; exit 1; }
      
      - name: 🧪 Run Critical Tests
        env:
          TEST_BASE_URL: ${{ steps.channel-url.outputs.CHANNEL_URL }}
        run: |
          echo "Running critical tests against ${{ steps.channel-url.outputs.CHANNEL_URL }}"
          npx playwright test -c playwright.config.lean.ts --grep critical
      
      - name: 📝 Save Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lean-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 7
      
      - name: 📊 Test Summary
        run: |
          echo "🧪 LEAN CHANNEL TESTS COMPLETE"
          echo "============================="
          echo "📋 Channel ID: ${{ steps.channel-url.outputs.CHANNEL_ID }}"
          echo "🔗 URL: ${{ steps.channel-url.outputs.CHANNEL_URL }}"
          echo "🌿 Branch: ${GITHUB_REF#refs/heads/}"
          echo ""
          echo "✅ Critical tests completed"
